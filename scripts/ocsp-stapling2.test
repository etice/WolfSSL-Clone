#!/bin/bash
# ocsp-stapling.test

resume_port=0
ready_file1=`pwd`/wolf_ocsp_s2_readyF1$$
ready_file2=`pwd`/wolf_ocsp_s2_readyF2$$
ready_file3=`pwd`/wolf_ocsp_s2_readyF3$$
test_cnf1="./certs/ocsp/ocsp_s2_1.cnf"
test_cnf2="./certs/ocsp/ocsp_s2_2.cnf"
test_key1="./certs/ocsp/server3-key.pem"
test_key2="./certs/ocsp/server4-key.pem"
test_key3="./certs/ocsp/server5-key.pem"
test_csr1="./certs/ocsp/ocsp_s2_csr1.csr"
test_csr2="./certs/ocsp/ocsp_s2_csr2.csr"
test_csr3="./certs/ocsp/ocsp_s2_csr3.csr"
test_CA1="./certs/ocsp/intermediate2-ca-cert.pem"
test_CA2="./certs/ocsp/intermediate3-ca-cert.pem"
test_CAK1="./certs/ocsp/intermediate2-ca-key.pem"
test_CAK2="./certs/ocsp/intermediate3-ca-key.pem"
test_ext1=v3_req2
test_ext2=v3_req3
test_CN1="www3.wolfssl.com"
test_CN2="www4.wolfssl.com"
test_CN3="www5.wolfssl.com"
test_cert1="./certs/ocsp/server3-cert.pem"
test_cert2="./certs/ocsp/server4-cert.pem"
test_cert3="./certs/ocsp/server5-cert.pem"
test_serial1=07
test_serial2=08
test_serial3=09

#input parameters:
# 1 - key to use for new cert generation
# 2 - name of cert signing request to create
# 3 - Common Name unique for entity
# 4 - The configure file to use (cnf)
# 5 - extensions to use from configure file (cnf)
# 6 - the Intermediate authority
# 7 - the Intermediate authority key
# 8 - the test cert to update
# 9 - the serial to set
update_cert(){
    printf '%s\n' "ARG1: $1"
    printf '%s\n' "ARG2: $2"
    printf '%s\n' "ARG3: $3"
    printf '%s\n' "ARG4: $4"
    printf '%s\n' "ARG5: $5"
    printf '%s\n' "ARG6: $6"
    printf '%s\n' "ARG7: $7"
    printf '%s\n' "ARG8: $8"
    printf '%s\n' "ARG9: $9"

    printf '%s\n' "Updating cert for test case"
    openssl req -new -key $1 -out $2 -subj "/C=US/ST=Washington/L=Seattle/O=wolfSSL/OU=Engineering/CN=${3}/emailAddress=info@wolfssl.com"
    openssl x509 -req -in $2 -extfile $4 -extensions $5 -days 1000 -CA $6 -CAkey $7 -set_serial $9 -out $8 -sha256
    rm $2
    openssl x509 -in $8 -text > tmp.pem
    mv tmp.pem $8
    cat $6 >> $8
}

#use first random port selected in cnf1
create_new_cnf1() {
printf '%s\n' "#" > $test_cnf1
printf '%s\n' "# temp cnf for testing, remove when done" >> $test_cnf1
printf '%s\n' "#" >> $test_cnf1
printf '%s\n' "" >> $test_cnf1
printf '%s\n' "# Extensions to add to a certificate request (intermediate2-ca)" >> $test_cnf1
printf '%s\n' "[ v3_req2 ]" >> $test_cnf1
printf '%s\n' "basicConstraints       = CA:false" >> $test_cnf1
printf '%s\n' "subjectKeyIdentifier   = hash" >> $test_cnf1
printf '%s\n' "authorityKeyIdentifier = keyid:always,issuer:always" >> $test_cnf1
printf '%s\n' "keyUsage               = nonRepudiation, digitalSignature, keyEncipherment" >> $test_cnf1
printf '%s\n' "authorityInfoAccess    = OCSP;URI:http://127.0.0.1:$1" >> $test_cnf1
printf '%s\n' "" >> $test_cnf1

update_cert $test_key1 $test_csr1 $test_CN1 $test_cnf1 $test_ext1 $test_CA1 \
            $test_CAK1 $test_cert1 $test_serial1
}

#use 2nd and 3rd random ports selected in cnf2
create_new_cnf2() {
printf '%s\n' "#" > $test_cnf2
printf '%s\n' "# temp cnf for testing, remove when done" >> $test_cnf2
printf '%s\n' "#" >> $test_cnf2
printf '%s\n' "" >> $test_cnf2
printf '%s\n' "# Extensions to add to a certificate request (intermediate2-ca)" >> $test_cnf2
printf '%s\n' "[ v3_req2 ]" >> $test_cnf2
printf '%s\n' "basicConstraints       = CA:false" >> $test_cnf2
printf '%s\n' "subjectKeyIdentifier   = hash" >> $test_cnf2
printf '%s\n' "authorityKeyIdentifier = keyid:always,issuer:always" >> $test_cnf2
printf '%s\n' "keyUsage               = nonRepudiation, digitalSignature, keyEncipherment" >> $test_cnf2
printf '%s\n' "authorityInfoAccess    = OCSP;URI:http://127.0.0.1:$1" >> $test_cnf2
printf '%s\n' "" >> $test_cnf2
printf '%s\n' "# Extensions to add to a certificate request (intermediate3-ca)" >> $test_cnf2
printf '%s\n' "[ v3_req3 ]" >> $test_cnf2
printf '%s\n' "basicConstraints       = CA:false" >> $test_cnf2
printf '%s\n' "subjectKeyIdentifier   = hash" >> $test_cnf2
printf '%s\n' "authorityKeyIdentifier = keyid:always,issuer:always" >> $test_cnf2
printf '%s\n' "keyUsage               = nonRepudiation, digitalSignature, keyEncipherment" >> $test_cnf2
printf '%s\n' "authorityInfoAccess    = OCSP;URI:http://127.0.0.1:$2" >> $test_cnf2
printf '%s\n' "" >> $test_cnf2


update_cert $test_key2 $test_csr2 $test_CN2 $test_cnf2 $test_ext1 $test_CA1 \
            $test_CAK1 $test_cert2 $test_serial2

update_cert $test_key3 $test_csr3 $test_CN3 $test_cnf2 $test_ext2 $test_CA2 \
            $test_CAK2 $test_cert3 $test_serial3
}

remove_ready_file(){
    if test -e $ready_file1; then
        printf '%s\n' "removing ready file: $ready_file1"
        rm $ready_file1
    fi
    if test -e $ready_file2; then
        printf '%s\n' "removing ready file: $ready_file2"
        rm $ready_file2
    fi
    if test -e $ready_file3; then
        printf '%s\n' "removing ready file: $ready_file3"
        rm $ready_file3
    fi
}

cleanup()
{
    for i in $(jobs -pr)
    do
        kill -s HUP "$i"
    done
    remove_ready_file
    git checkout $test_cert1 $test_cert2 $test_cert3
    rm $test_cnf1 $test_cnf2
}
trap cleanup EXIT INT TERM HUP

[ ! -x ./examples/client/client ] && printf '\n\n%s\n' "Client doesn't exist" && exit 1

#get three unique ports
# 1:
./examples/server/server -R $ready_file1 -p $resume_port &
sleep 1
if [ ! -f $ready_file1 ]; then
    printf '%s\n' "Failed to create ready file1: \"$ready_file1\""
    exit 1
else
    RPORTSELECTED1=`cat $ready_file1`
    printf '%s\n' "Random port selected: $RPORTSELECTED1"
    # Use client connection to cleanly shutdown the server
    ./examples/client/client -p $RPORTSELECTED1
fi
# 2:
./examples/server/server -R $ready_file2 -p $resume_port &
sleep 1
if [ ! -f $ready_file2 ]; then
    printf '%s\n' "Failed to create ready file1: \"$ready_file2\""
    exit 1
else
    RPORTSELECTED2=`cat $ready_file2`
    printf '%s\n' "Random port selected: $RPORTSELECTED2"
    # Use client connection to cleanly shutdown the server
    ./examples/client/client -p $RPORTSELECTED2
fi
# 3:
./examples/server/server -R $ready_file3 -p $resume_port &
sleep 1
if [ ! -f $ready_file3 ]; then
    printf '%s\n' "Failed to create ready file1: \"$ready_file3\""
    exit 1
else
    RPORTSELECTED3=`cat $ready_file3`
    printf '%s\n' "Random port selected: $RPORTSELECTED3"
    # Use client connection to cleanly shutdown the server
    ./examples/client/client -p $RPORTSELECTED3
    create_new_cnf1 $RPORTSELECTED2
    create_new_cnf2 $RPORTSELECTED2 $RPORTSELECTED3
fi

# setup ocsp responders
# OLD: ./certs/ocsp/ocspd-root-ca-and-intermediate-cas.sh &
# NEW: openssl isn't being cleaned up, invoke directly in script for cleanup
# purposes!
openssl ocsp -port $RPORTSELECTED1 -nmin 1                \
    -index   certs/ocsp/index-ca-and-intermediate-cas.txt \
    -rsigner certs/ocsp/ocsp-responder-cert.pem           \
    -rkey    certs/ocsp/ocsp-responder-key.pem            \
    -CA      certs/ocsp/root-ca-cert.pem                  \
    $@                                                    \
    &

# OLD: ./certs/ocsp/ocspd-intermediate2-ca-issued-certs.sh &
# NEW: openssl isn't being cleaned up, invoke directly in script for cleanup
# purposes!
openssl ocsp -port $RPORTSELECTED2 -nmin 1                      \
    -index   certs/ocsp/index-intermediate2-ca-issued-certs.txt \
    -rsigner certs/ocsp/ocsp-responder-cert.pem                 \
    -rkey    certs/ocsp/ocsp-responder-key.pem                  \
    -CA      certs/ocsp/intermediate2-ca-cert.pem               \
    $@                                                          \
    &

# OLD: ./certs/ocsp/ocspd-intermediate3-ca-issued-certs.sh &
# NEW: openssl isn't being cleaned up, invoke directly in script for cleanup
# purposes!
openssl ocsp -port $RPORTSELECTED3 -nmin 1                      \
    -index   certs/ocsp/index-intermediate3-ca-issued-certs.txt \
    -rsigner certs/ocsp/ocsp-responder-cert.pem                 \
    -rkey    certs/ocsp/ocsp-responder-key.pem                  \
    -CA      certs/ocsp/intermediate3-ca-cert.pem               \
    $@                                                          \
    &

sleep 1
# "jobs" is not portable for posix. Must use bash interpreter!
[ $(jobs -r | wc -l) -ne 3 ] && printf '\n\n%s\n' "Setup ocsp responder failed, skipping" && exit 0

printf '\n\n%s\n\n' "All OCSP responders started successfully!"
printf '%s\n\n' "------------- TEST CASE 1 SHOULD PASS ------------------------"
# client test against our own server - GOOD CERTS
./examples/server/server -c certs/ocsp/server3-cert.pem -k certs/ocsp/server3-key.pem &
sleep 1
./examples/client/client -C -A certs/ocsp/root-ca-cert.pem -W 2 -v 3
RESULT=$?
[ $RESULT -ne 0 ] && printf '\n\n%s\n' "Client connection 1 failed" && exit 1
printf '%s\n\n' "Test PASSED!"

printf '%s\n\n' "------------- TEST CASE 2 SHOULD PASS ------------------------"

#./examples/server/server -c certs/ocsp/server3-cert.pem -k certs/ocsp/server3-key.pem &
#sleep 1
#./examples/client/client -C -A certs/ocsp/root-ca-cert.pem -W 3 -v 3
#RESULT=$?
#[ $RESULT -ne 0 ] && printf '\n\n%s\n' "Client connection 2 failed" && exit 1
#printf '%s\n\n' "Test PASSED!"

printf '%s\n\n' "------------- TEST CASE 3 SHOULD REVOKE ----------------------"
# client test against our own server - REVOKED SERVER CERT
./examples/server/server -c certs/ocsp/server4-cert.pem -k certs/ocsp/server4-key.pem &
sleep 1
./examples/client/client -C -A certs/ocsp/root-ca-cert.pem -W 2 -v 3
RESULT=$?
[ $RESULT -ne 1 ] && printf '\n\n%s\n' "Client connection suceeded $RESULT" && exit 1
printf '%s\n\n' "Test successfully REVOKED!"

printf '%s\n\n' "------------- TEST CASE 4 SHOULD REVOKE ----------------------"
./examples/server/server -c certs/ocsp/server4-cert.pem -k certs/ocsp/server4-key.pem &
sleep 1
./examples/client/client -C -A certs/ocsp/root-ca-cert.pem -W 3 -v 3
RESULT=$?
[ $RESULT -ne 1 ] && printf '\n\n%s\n' "Client connection suceeded $RESULT" && exit 1
printf '%s\n\n' "Test successfully REVOKED!"

printf '%s\n\n' "------------- TEST CASE 5 SHOULD PASS ------------------------"
# client test against our own server - REVOKED INTERMEDIATE CERT
./examples/server/server -c certs/ocsp/server5-cert.pem -k certs/ocsp/server5-key.pem &
sleep 1
./examples/client/client -C -A certs/ocsp/root-ca-cert.pem -W 2 -v 3
RESULT=$?
[ $RESULT -ne 0 ] && printf '\n\n%s\n' "Client connection 3 failed $RESULT" && exit 1
printf '%s\n\n' "Test PASSED!"

printf '%s\n\n' "------------- TEST CASE 6 SHOULD REVOKE ----------------------"
./examples/server/server -c certs/ocsp/server5-cert.pem -k certs/ocsp/server5-key.pem &
sleep 1
./examples/client/client -C -A certs/ocsp/root-ca-cert.pem -W 3 -v 3
RESULT=$?
[ $RESULT -ne 1 ] && printf '\n\n%s\n' "Client connection suceeded $RESULT" && exit 1
printf '%s\n\n' "Test successfully REVOKED!"
printf '%s\n\n' "------------------- TESTS COMPLETE ---------------------------"

exit 0
