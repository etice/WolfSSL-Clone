#!/bin/bash

# ocsp-stapling.test

# create a unique ready file ending in PID for the script instance ($$) to take
# advantage of port zero solution
resume_port=0
ready_file=`pwd`/wolf_ocsp_s1_readyF$$
test_cnf="./certs/ocsp/ocsp_s1.cnf"
test_key="./certs/ocsp/server1-key.pem"
test_csr="./certs/ocsp/ocsp_s1_csr.csr"
test_CA="./certs/ocsp/intermediate1-ca-cert.pem"
test_CAK="./certs/ocsp/intermediate1-ca-key.pem"
test_cert="./certs/ocsp/server1-cert.pem"

printf '%s\n' "ready file:  $ready_file"

# create a new cert for use with the port 0 solution test case
update_cert(){
    printf '%s\n' "Updating cert for test case"
    openssl req -new -key $test_key -out $test_csr -subj "/C=US/ST=Washington/L=Seattle/O=wolfSSL/OU=Engineering/CN=www1.wolfssl.com/emailAddress=info@wolfssl.com"
    openssl x509 -req -in $test_csr -extfile $test_cnf -extensions v3_req1 -days 100 -CA $test_CA -CAkey $test_CAK -set_serial 05 -out $test_cert -sha256
    rm $test_csr
    openssl x509 -in $test_cert -text > tmp.pem
    mv tmp.pem $test_cert
    cat $test_CA >> $test_cert
}

#create a configure file for cert generation with the port 0 solution
create_new_cnf() {
printf '%s\n' "#" > $test_cnf
printf '%s\n' "# temp cnf for testing, remove when done" >> $test_cnf
printf '%s\n' "#" >> $test_cnf
printf '%s\n' "" >> $test_cnf
printf '%s\n' "# Extensions to add to a certificate request (intermediate1-ca)" >> $test_cnf
printf '%s\n' "[ v3_req1 ]" >> $test_cnf
printf '%s\n' "basicConstraints       = CA:false" >> $test_cnf
printf '%s\n' "subjectKeyIdentifier   = hash" >> $test_cnf
printf '%s\n' "authorityKeyIdentifier = keyid:always,issuer:always" >> $test_cnf
printf '%s\n' "keyUsage               = nonRepudiation, digitalSignature, keyEncipherment" >> $test_cnf
printf '%s\n' "authorityInfoAccess    = OCSP;URI:http://127.0.0.1:$1" >> $test_cnf
printf '%s\n' "" >> $test_cnf
update_cert
}

remove_ready_file() {
    if test -e $ready_file; then
        printf '%s\n' "removing ready file"
        rm $ready_file
    fi
}

cleanup()
{
    for i in $(jobs -pr)
    do
        kill -s HUP "$i"
    done
    remove_ready_file
    git checkout $test_cert
    rm $test_cnf
}
trap cleanup EXIT INT TERM HUP

server=login.live.com
ca=certs/external/baltimore-cybertrust-root.pem

[ ! -x ./examples/client/client ] && printf '\n\n%s\n' "Client doesn't exist" \
                                  && exit 1

./examples/client/client -? 2>&1 | grep -- 'Client not compiled in!'
if [ $? -eq 0 ]; then
    exit 0
fi

# create a port 0 port to use with openssl ocsp responder
./examples/server/server -R $ready_file -p $resume_port &
SREADYPID=$!
sleep 1
if [ ! -f $ready_file ]; then
    printf '%s\n' "Failed to create ready file: \"$ready_file\""
    exit 1
else
    RPORTSELECTED=`cat $ready_file`
    printf '%s\n' "Random port selected: $RPORTSELECTED"
    # Use client connection to shutdown the server cleanly
    ./examples/client/client -p $RPORTSELECTED
    create_new_cnf $RPORTSELECTED
fi


# is our desired server there? - login.live.com doesn't answers PING
#./scripts/ping.test $server 2

# client test against the server
./examples/client/client -C -h $server -p 443 -A $ca -g -W 1
RESULT=$?
[ $RESULT -ne 0 ] && printf '\n\n%s\n' "Client connection 1 failed" && exit 1


# Test with example server

./examples/server/server -? 2>&1 | grep -- 'Server not compiled in!'
if [ $? -eq 0 ]; then
    exit 0
fi

# setup ocsp responder
# OLD: ./certs/ocsp/ocspd-intermediate1-ca-issued-certs.sh &
# NEW: openssl isn't being cleaned up, invoke directly in script for cleanup
# purposes!
openssl ocsp -port $RPORTSELECTED -nmin 1                       \
    -index   certs/ocsp/index-intermediate1-ca-issued-certs.txt \
    -rsigner certs/ocsp/ocsp-responder-cert.pem                 \
    -rkey    certs/ocsp/ocsp-responder-key.pem                  \
    -CA      certs/ocsp/intermediate1-ca-cert.pem               \
    "$@" &

sleep 1
# "jobs" is not portable for posix. Must use bash interpreter!
[ $(jobs -r | wc -l) -ne 1 ] && \
             printf '\n\n%s\n' "Setup ocsp responder failed, skipping" && exit 0

printf '%s\n\n' "------------- TEST CASE 1 SHOULD PASS ------------------------"
# client test against our own server - GOOD CERT
./examples/server/server -c certs/ocsp/server1-cert.pem \
                         -k certs/ocsp/server1-key.pem &
sleep 1
./examples/client/client -C -A certs/ocsp/root-ca-cert.pem -W 1
RESULT=$?
[ $RESULT -ne 0 ] && printf '\n\n%s\n' "Client connection 2 failed" && exit 1
printf '%s\n\n' "Test PASSED!"

printf '%s\n\n' "------------- TEST CASE 2 SHOULD REVOKE ----------------------"
# client test against our own server - REVOKED CERT
./examples/server/server -c certs/ocsp/server2-cert.pem \
                         -k certs/ocsp/server2-key.pem &
sleep 1
./examples/client/client -C -A certs/ocsp/root-ca-cert.pem -W 1
RESULT=$?
[ $RESULT -ne 1 ] && printf '\n\n%s\n' "Client connection suceeded $RESULT" \
                  && exit 1
printf '%s\n\n' "Test successfully REVOKED!"


./examples/client/client -v 4 2>&1 | grep -- 'Bad SSL version'
if [ $? -ne 0 ]; then
    printf '%s\n\n' "------------- TEST CASE 3 SHOULD PASS --------------------"
    # client test against our own server - GOOD CERT
    ./examples/server/server -c certs/ocsp/server1-cert.pem \
                             -k certs/ocsp/server1-key.pem -v 4 &
    sleep 1
    ./examples/client/client -C -A certs/ocsp/root-ca-cert.pem -W 1 -v 4 -F 1
    RESULT=$?
    [ $RESULT -ne 0 ] && printf '\n\n%s\n' "Client connection 3 failed" && exit 1
    printf '%s\n\n' "Test PASSED!"

    printf '%s\n\n' "------------- TEST CASE 4 SHOULD REVOKE ------------------"
    # client test against our own server - REVOKED CERT
    ./examples/server/server -c certs/ocsp/server2-cert.pem \
                             -k certs/ocsp/server2-key.pem -v 4 &
    sleep 1
    ./examples/client/client -C -A certs/ocsp/root-ca-cert.pem -W 1 -v 4 -F 1
    RESULT=$?
    [ $RESULT -ne 1 ] && \
                      printf '\n\n%s\n' "Client connection suceeded $RESULT" \
                      && exit 1
    printf '%s\n\n' "Test successfully REVOKED!"
fi

exit 0
