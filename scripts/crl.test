#!/bin/bash

#crl.test

log_file="scripts/client_result.txt"
success_line="err = -361, CRL Cert revoked"
exit_code=-1

crl_port=11113
#no_pid tells us process was never started if -1
no_pid=-1
#server_pid captured on startup, stores the id of the server process
server_pid=$no_pid

function remove_ready_file() {
    if test -e /tmp/wolfssl_server_ready; then
        echo -e "removing exisitng server_ready file"
        rm /tmp/wolfssl_server_ready
    fi
}

function remove_log_file() {
    if test -e $log_file; then
        echo -e "removing client log file"
        rm $log_file
    fi
}

# trap this function so if user aborts with ^C or other kill signal we still
# get an exit that will in turn clean up the file system
function abort_trap() {
    exit_code=-2 #different exit code in case of user interrupt
    echo "got abort signal, exiting with $exit_code"
    exit $exit_code
}
trap abort_trap INT TERM


# trap this function so that if we exit on an error the file system will still
# be restored and the other tests may still pass. Never call this function
# instead use "exit <some value>" and this function will run automatically
function restore_file_system() {
    echo "in cleanup"

    if  [ $server_pid != $no_pid ]
    then
        echo "killing server"
        kill -9 $server_pid
    fi
    remove_ready_file
    remove_log_file
}
trap restore_file_system EXIT

function run_test() {
    echo -e "\nStarting example server for crl test...\n"

    remove_ready_file

    # starts the server on crl_port, -R generates ready file to be used as a
    # mutex lock, -c loads the revoked certificate. We capture the processid
    # into the variable server_pid
    ./examples/server/server -R -p $crl_port -c certs/server-revoked-cert.pem &
    server_pid=$!

    while [ ! -s /tmp/wolfssl_server_ready ]; do
        echo -e "waiting for server_ready file..."
        sleep 0.1
    done

    # starts client on crl_port and redirects output to log_file
    ./examples/client/client -p $crl_port &> $log_file
    client_result=$?

    if test -e $log_file
    then
        while read line;
        do
            if [[ "x$success_line" == "x$line" ]]
            then
                echo "Successful Revocation!!!!"
            fi
        done < $log_file
    fi
}


######### begin program #########

# run the test
run_test
exit_code=0
echo "exiting with $exit_code"
exit $exit_code
########## end program ##########
