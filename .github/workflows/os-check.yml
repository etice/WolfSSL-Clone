name: Ubuntu-Macos-Windows Tests
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  push:
    branches: [ 'master', 'main', 'release/**' ]
  pull_request:
    branches: [ '*' ]

jobs:
  make_check:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    name: make_check on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - if: ${{ matrix.os == 'macos-latest' }}
      run: brew install automake libtool
    - run: ./autogen.sh
    - name: configure make check
      run: |
        ./configure
        make
        make check
        make distcheck

  make_check_enable_all:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    name: make_check_enable_all on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - if: ${{ matrix.os == 'macos-latest' }}
      run: brew install automake libtool
    - run: ./autogen.sh
    - name: configure all make check
      run: |
        ./configure --enable-all
        make
        make check
        make distcheck

  make_check_enable_all_asn:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    name: make_check_enable_all_asn on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - if: ${{ matrix.os == 'macos-latest' }}
      run: brew install automake libtool
    - run: ./autogen.sh
    - name: configure all ASN template
      run: |
        ./configure --enable-all --enable-asn=template
        make
        make check
        make distcheck

  make_user:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    name: make_user on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - if: ${{ matrix.os == 'macos-latest' }}
      run: brew install automake libtool
    - run: ./autogen.sh
    - name: make user_settings_all.h
      run: |
        cp ./examples/configs/user_settings_all.h user_settings.h
        ./configure --enable-usersettings
        make
        make check

  make_user_all:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    name: make_user_all on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - if: ${{ matrix.os == 'macos-latest' }}
      run: brew install automake libtool
    - run: ./autogen.sh
    - name: user_settings_all.h with compatibility layer
      run: |
        cp ./examples/configs/user_settings_all.h user_settings.h
        sed -i -e "s/if 0/if 1/" user_settings.h
        ./configure --enable-usersettings
        make
        make check

  make_user_minecc:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    name: make_user_minecc on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - if: ${{ matrix.os == 'macos-latest' }}
      run: brew install automake libtool
    - run: ./autogen.sh
    - name: user_settings_min_ecc.h
      run: |
        cp ./examples/configs/user_settings_min_ecc.h user_settings.h
        ./configure --enable-usersettings --disable-examples
        make
        ./wolfcrypt/test/testwolfcrypt

  make_user_wolfboot:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    name: make_user_wolfboot on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - if: ${{ matrix.os == 'macos-latest' }}
      run: brew install automake libtool
    - run: ./autogen.sh
    - name: user_settings_wolfboot_keytools.h
      run: |
        cp ./examples/configs/user_settings_wolfboot_keytools.h user_settings.h
        ./configure --enable-usersettings --disable-examples
        make
        ./wolfcrypt/test/testwolfcrypt

  windows_build:
    name: Windows Build Test
    runs-on: windows-latest
    env:
      # Path to the solution file relative to the root of the project.
      SOLUTION_FILE_PATH: wolfssl64.sln

      # Configuration type to build.
      # You can convert this to a build matrix if you need coverage of multiple configuration types.
      # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
      BUILD_CONFIGURATION: Release
      BUILD_PLATFORM: x64
    steps:
    - uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:PlatformToolset=v142 /p:Platform=${{env.BUILD_PLATFORM}} /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
